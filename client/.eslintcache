[{"/Users/mrwn/Webdev/tinyhouse_v1/client/src/sections/index.tsx":"1","/Users/mrwn/Webdev/tinyhouse_v1/client/src/sections/Listings/index.tsx":"2","/Users/mrwn/Webdev/tinyhouse_v1/client/src/sections/Listings/Listings.tsx":"3","/Users/mrwn/Webdev/tinyhouse_v1/client/src/index.tsx":"4","/Users/mrwn/Webdev/tinyhouse_v1/client/src/lib/api/server.ts":"5","/Users/mrwn/Webdev/tinyhouse_v1/client/src/lib/api/index.ts":"6","/Users/mrwn/Webdev/tinyhouse_v1/client/src/lib/api/useQuery.ts":"7","/Users/mrwn/Webdev/tinyhouse_v1/client/src/lib/api/useMutation.ts":"8"},{"size":27,"mtime":1606660743906,"results":"9","hashOfConfig":"10"},{"size":26,"mtime":1606660072848,"results":"11","hashOfConfig":"10"},{"size":1848,"mtime":1607442806524,"results":"12","hashOfConfig":"10"},{"size":475,"mtime":1606660921258,"results":"13","hashOfConfig":"10"},{"size":545,"mtime":1607089801677,"results":"14","hashOfConfig":"10"},{"size":54,"mtime":1606999584660,"results":"15","hashOfConfig":"10"},{"size":1643,"mtime":1607510171567,"results":"16","hashOfConfig":"10"},{"size":1590,"mtime":1607510664482,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hzorxz",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},"/Users/mrwn/Webdev/tinyhouse_v1/client/src/sections/index.tsx",[],"/Users/mrwn/Webdev/tinyhouse_v1/client/src/sections/Listings/index.tsx",[],"/Users/mrwn/Webdev/tinyhouse_v1/client/src/sections/Listings/Listings.tsx",[],"/Users/mrwn/Webdev/tinyhouse_v1/client/src/index.tsx",[],"/Users/mrwn/Webdev/tinyhouse_v1/client/src/lib/api/server.ts",[],"/Users/mrwn/Webdev/tinyhouse_v1/client/src/lib/api/index.ts",[],"/Users/mrwn/Webdev/tinyhouse_v1/client/src/lib/api/useQuery.ts",[],"/Users/mrwn/Webdev/tinyhouse_v1/client/src/lib/api/useMutation.ts",["35"],"import { useState, useReducer } from \"react\";\nimport { server } from \"./server\";\n\ninterface State<TData> {\n  data: TData | null;\n  loading: boolean;\n  error: boolean;\n}\n\ntype MutationTuple<TData, TVariables> = [\n  (variables?: TVariables | undefined) => Promise<void>,\n  State<TData>\n];\n\ntype Action<TData> =\n  | { type: \"FETCH\" }\n  | { type: \"FETCH_SUCCESS\"; payload: TData }\n  | { type: \"FETCH_ERROR\" };\n\nconst reducer = <TData>() => (\n  state: State<TData>,\n  action: Action<TData>\n): State<TData> => {\n  switch (action.type) {\n    case \"FETCH\":\n      return { ...state, loading: true };\n    case \"FETCH_SUCCESS\":\n      return { ...state, data: action.payload, loading: false, error: false };\n    case \"FETCH_ERROR\":\n      return { ...state, loading: false, error: true };\n    default:\n      throw new Error();\n  }\n};\n\nexport const useMutation = <TData = any, TVariables = any>(\n  query: string\n): MutationTuple<TData, TVariables> => {\n  const fetchReducer = reducer<TData>();\n  const [state, dispatch] = useReducer(fetchReducer, {\n    data: null,\n    loading: false,\n    error: false,\n  });\n  const fetch = async (variables?: TVariables) => {\n    try {\n      dispatch({ type: \"FETCH\" });\n\n      const { data, errors } = await server.fetch<TData, TVariables>({\n        query,\n        variables,\n      });\n\n      if (errors && errors.length) {\n        throw new Error(errors[0].message);\n      }\n\n      dispatch({ type: \"FETCH_SUCCESS\", payload: data });\n    } catch (err) {\n      dispatch({ type: \"FETCH_ERROR\" });\n      throw console.error(err);\n    }\n  };\n\n  return [fetch, state];\n};\n",{"ruleId":"36","severity":1,"message":"37","line":1,"column":10,"nodeType":"38","messageId":"39","endLine":1,"endColumn":18},"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar"]